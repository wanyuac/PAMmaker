#!/usr/bin/env python

"""
This script tabulate results of cd-hit/cd-hit-est, assigning cluster (gene) ID to every sequence.

It takes as input a clstr file generated by CD-HIT, which must show complete sequence names.
	>Cluster 34
	0	1536nt, >32__QepA_Flq__QepA__299... *
	1	1536nt, >32__QepA_Flq__QepA2__300... at 1:1536:1:1536/+/99.87%
	
Command: 
	python tabulate_cd-hit.py CDS.clstr > CDS_clusters.tsv
	
Output:
	cluster	index	seqid	length	identity	representative
	34	0	32__QepA_Flq__QepA__299	1536nt	100.00	Y
	34	1	32__QepA_Flq__QepA2__300	1536nt	100.00	N
	
	The representative sequence must show 100% identity to itself.
	Note that an index of zero does not necessarily mean this sequence is a representative sequence or the longest sequence.

This script is derived from my script clustering_allele_variants.py (https://github.com/wanyuac/SRSTx_toolkit).
Python version 2 and 3 compatible.

Copyright (C) 2017-2021 Yu Wan <wanyuac@126.com>
Licensed under the Apache License, Version 2.0
First edition: 28 Nov 2015; the latest edition: 26 May 2021
"""

import os
import sys
from argparse import ArgumentParser

def parse_argument():
	parser = ArgumentParser(description= "Tabulate CD-HIT/CD-HIT-EST output")
	parser.add_argument("-i", "--input", dest = "i", type = str, required = True, help = "Input clstr file")
	parser.add_argument("-e", "--cd_hit_est", dest = "e", action = "store_true", help = "The input clstr file was produced by cd-hit-est")
	return parser.parse_args()

def main():
	args = parse_argument()
	clstr = args.i
	if os.path.exists(clstr):
		with open(clstr, "r") as f:  # Mode "rU" is deprecated in Python 3.8+.
			contents = f.read().splitlines()
	else:
		print("Error: input file " + clstr + " is not accessible.", file = sys.stderr)
		sys.exit(1)
		
	print("\t".join(["cluster", "index", "seqid", "length", "identity", "representative"]))  # Header
		
	for line in contents:
		if line.startswith(">"):  # the line denoting the start of a new cluster
			cluster_id = line.split(" ")[1]  # reads a new cluster ID: "0", "1", "2", ...
		else:  # cluster content
			domains = line.split("\t")
			index = domains[0]
			fields = domains[1].split(" ")  # parse information such as "1536nt, >32__QepA_Flq__QepA__299... *"
			seqlen = fields[0][0 : -3]  # removes "nt," or "aa,"
			seqid = fields[1][1 : -3]  # removes ">" and "..." from the string
			if fields[-1] == "*":  # a representative sequence is found
				identity = "100.00"
				representative = "Y"  # yes
			else:  # Non-representative sequences
				if args.e:  # cd-hit-est: 'at 1:1569:1:1569/+/100.00%'; cd-hit: 'at 100.00%'.
					identity = fields[-1].split("/")[-1]  # remove stuff like "at 1:1569:1:1569/+/"
				else:
					identity = fields[-1].split(" ")[-1]  # remove 'at '
				identity = fields[-1][0 : -1]  # drop the % sign
				representative = "N"  # no

			print("\t".join([cluster_id, index, seqid, seqlen, identity, representative]))
	return
	
# The main program
if __name__ == "__main__":
    main()

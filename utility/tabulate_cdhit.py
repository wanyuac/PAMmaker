#!/usr/bin/env python

"""
This script tabulate results of cd-hit/cd-hit-est, assigning cluster (gene) ID to every sequence.

It takes as input a clstr file generated by CD-HIT, which must show complete sequence names.
	>Cluster 34
	0	1536nt, >32__QepA_Flq__QepA__299... *
	1	1536nt, >32__QepA_Flq__QepA2__300... at 1:1536:1:1536/+/99.87%
	
Command: 
	python tabulate_cd-hit.py CDS.clstr > CDS_tab.clstr
	
Output:
	cluster	index	seqid	length	identity	representative
	34	0	32__QepA_Flq__QepA__299	1536nt	100%	Y
	34	1	32__QepA_Flq__QepA2__300	1536nt	100%	N
	
	The representative sequence must show 100% identity to itself.
	Note that an index of zero does not necessarily mean this sequence is a representative sequence or the longest sequence.

This script is derived from my script clustering_allele_variants.py (https://github.com/wanyuac/SRSTx_toolkit).

Python version 2 and 3 compatible.

Author: Yu Wan (wanyuac@gmail.com, GitHub: https://github.com/wanyuac)
Copyright 2017 Yu Wan
Licensed under the Apache License, Version 2.0
First edition: 28 Nov 2015; the latest edition: 26 May 2020
"""

import sys

def main():
	with open(sys.argv[1], "r") as f:  # Mode "rU" is deprecated in Python 3.8+.
		contents = f.read().splitlines()
		
	print("\t".join(["cluster", "index", "seqid", "length", "identity", "representative"]))
		
	for line in contents:
		if line.startswith(">"):  # the line denoting the start of a new cluster
			cluster_id = line.split(" ")[1]  # reads a new cluster ID: "0", "1", "2", ...
		else:  # cluster content
			domains = line.split("\t")
			index = domains[0]
			fields = domains[1].split(" ")  # parse information such as "1536nt, >32__QepA_Flq__QepA__299... *"
			seqlen = fields[0][0 : -3]  # removes "nt,"
			seqid = fields[1][1 : -3]  # removes ">" and "..." from the string
			if fields[-1] == "*":  # a representative sequence is found
				identity = "100%"
				representative = "Y"  # yes
			else:
				identity = fields[-1].split("/")[-1]  # remove stuff like "at 1:1569:1:1569/+/"
				representative = "N"  # no
			print("\t".join([cluster_id, index, seqid, seqlen, identity, representative]))
	
# The main program
if __name__ == "__main__":
    main()

"""
This program assigns identifiers to allele variants in the compiled result of SRST2 (https://github.com/katholt/srst2) in accordance with consensus sequences clustered by cd-hit-est.
It works as a downstream process after tabulate_cd-hit.py. Specifically, it takes as input from stdin and prints results to stdout.
In particular, this program assumes question marks have been removed from the compiled result using a proper method to solve ambiguity in allele calls.

Usage:
	python tabulate_cdhit.py clusters.fna.clstr | python clustering_allele_variants.py srst2_compiledResults.txt > compiledResults_clusterd.txt
	cat cluster_table.txt | python clustering_allele_variants.py srst2_compiledResults.txt > compiledResults_clusterd.txt  # if you already have a tabulated cluster file
	cat cluster_table.txt | python clustering_allele_variants.py srst2_compiledResults.txt 1 > compiledResults_clusterd.txt  # when allele calls do not have unique allele identifiers

Input:
	1. A compiled tab-deliminated file generated by SRST2 using the command: python srst2.py --prev_output *__genes*results.txt --output <prefix>
	2. A cluster file created by either cd-hit or cd-hit-est.
	
Output: A new file of compiled results, where each allele variant are assigned a unique cluster identifier.

Python version: 3.4.3
Author: Yu Wan (wanyuac@gmail.com, GitHub: https://github.com/wanyuac)
Editions: 29 July 2015, 5 Sep 2016, 27 Jun 2017
This script is derived from clustering_allele_variants.py in my repository SRST2_toolkit (https://github.com/wanyuac/SRST2_toolkit).

License: Apache License, Version 2.0
"""

import sys
import re
import collections
	
def extract_alleleID(id, ext):
	"""
	This function changes sequence names in the cluster file into allele names used in SRST2. For example, 
	if ext == True:
		input = "66__FloR_Phe__FloR__1212", output = "FloR_1212"
	"""
	fields = id.split("__")[-2:]  # only take the last two elements: allele name and sequence identifier
	if ext:
		new_id = "_".join(fields)  # shorten the double underscores into a single one in order to match the format in SRST2 gene profiles.
	else:
		new_id = fields[0]  # only take the first element in the ID list, eg. returns FloR for the example above
		
	return new_id

def read_clusters(lines, id_ext = True):
	"""
	This function reads a tabulated cluster file produced by cd-hit-est and my script tabulate_cdhit.py, and then
	returns a dictionary of clusters following the structure: {allele_name: {cluster_id : [sample1, sample2, ...]}},
	where two keys are applied hierarchically.
	"""
	clusters = collections.defaultdict(dict)
	for line in lines[1 : ]:  # skip the header line
		fields = line.split("\t")
		cluster_id = fields[0]  # an integer
		allele_info = fields[2].split("|")  # "0__OqxB_Flq__OqxB__49.variant|NTUH-K2044" -> ["0__OqxB_Flq__OqxB__49.variant", "NTUH-K2044"]
		
		# Extract the sequence ID, such as 52__TetA_Tet__TetA__1545, with a regular expression; then convert it into an allele name
		# For instance, the regular expression extracts "0__OqxB_Flq__OqxB__49" out of "0__OqxB_Flq__OqxB__49.consensus".
		allele = extract_alleleID(re.findall("(.+?)\.", allele_info[0])[0], ext = id_ext)
		sample = allele_info[1]  # extract the sample ID from the line with a regular expression
		clusters[sample][allele] = cluster_id  # save this cluster_id in the dictionary {sample : {allele : cluster_id}}
		
	return clusters
	
def assign_clusterIDs(gene_table, clusters):
	"""
	This function assigns an extended allele identifier to every allele call if it is a variant of its reference.
	The additional identifier is ID of each cluster.
	For example, "Aac6-Iaa_760*" becomes "aac6-Iaa_760.10" in the output, where 10 is the cluster where this allele belongs to in an output from cd-hit-est.
	"""
	f = open(gene_table, "rU")
	content = f.read().splitlines()
	print(content[0])  # print the header line first
	for row in content[1:]:  # for every row of this table
		fields = row.split("\t")
		sample = fields[0]
		new_line = [sample]
		for allele in fields[1:]:
			if allele[-1] == "*":  # This is a variant; otherwise, no change is needed.
				allele = allele.replace("*", "." + clusters[sample][allele[:-1]])  # replace the asterisk with a cluster ID
			new_line.append(allele)  # non-variants remain intact
		print("\t".join(new_line))  # print a new line to the stdout
	f.close()
	
	return

def main():
	argv_len = len(sys.argv)  # number of arguments (>= 1)
	if argv_len == 2:  # Allele calls have unique allele identifiers, which is the most common case of results.
		assign_clusterIDs(gene_table = sys.argv[1], clusters = read_clusters(sys.stdin.read().splitlines(), True))  # a table showing allele calls of every gene over samples
	elif argv_len > 2:  # In a few cases, there is no unique allele identifiers (such as intI1, not intI1_1). This may happen when the reference database is small.
		assign_clusterIDs(gene_table = sys.argv[1], clusters = read_clusters(sys.stdin.read().splitlines(), False))
	else:
		exit("Error: a file showing allele calls of every gene over samples is required.")
	
# The main program
if __name__ == "__main__":
    main()
